// ss_SelectSimilarPolys
// Initial code generated by Softimage SDK Wizard
// Executed Wed Oct 5 20:57:23 UTC+0400 2011 by sshadows
// 

function XSILoadPlugin( in_reg )
{
	in_reg.Author = "sshadows";
	in_reg.Name = "ss_SelectSimilarPolys";
	in_reg.Email = "sshumihin@gmail.com"
	in_reg.URL = "softimage.ru"

	in_reg.Major = 1;
	in_reg.Minor = 0;

	in_reg.RegisterMenu(siMenuMCPSelectBottomID ,"ss_SelectSimilarPolys", false);
	//RegistrationInsertionPoint - do not remove this line

	return true;
}

function XSIUnloadPlugin( in_reg )
{
	var strPluginName;
	strPluginName = in_reg.Name;
	Application.LogMessage(strPluginName + " has been unloaded.",siVerbose);
	
	return true;
}

function ss_SelectSimilarPolys__Define(in_ctxt)
{
	var oPset = in_ctxt.Source;

	oPset.AddParameter2("Treshold", siFloat, 0.1, 0.0, 1000.0, 0.0, 1.0, 0.0, siPersistable);

	return true;
}

function ss_SelectSimilarPolys_DefineLayout(in_ctxt)
{
	var oLayout = in_ctxt.Source;
	oLayout.Clear();

	var oItem = oItem = oLayout.AddGroup();
	oItem = oLayout.AddItem( "Treshold", "Treshold") ;	
	oItem = oLayout.EndGroup();
	
	return true;
}


function ss_SelectSimilarPolys_Init(in_ctxt)
{
	var oMenu = in_ctxt.Source;
	oMenu.AddCallbackItem( "Select Similar Polygons", "OnSelectSimilarPolys");
}

function OnSelectSimilarPolys(in_ctxt )
{
	var oSel = Selection(0);
	var oSubColl, oColl;
	
	try
	{
		oSubColl = oSel.SubComponent;
		oColl = oSubColl.ComponentCollection;
	}
	catch(e)
	{
		Logmessage("Select one polygon!", siWarning);
		return;
	}
	
	if(oColl.Count != 1)
	{
		Logmessage("Select one polygon!", siWarning);
		return;
	}

	var oPrefs = null;
	oPrefs = Application.ActiveSceneRoot.Properties.Item("SelectSimilar");
	
	if ( oPrefs == null)
	{
		oPrefs = ActiveSceneRoot.AddCustomProperty("SelectSimilar");
		oPrefs.AddParameter2("Treshold", siFloat, 0.1, 0.0, 1000.0, 0.0, 1.0, 0.0, siPersistable);
	}
	
	
	InspectObj (oPrefs, null, "SelectSimilar");
	
	var oTresh = oPrefs.Parameters("Treshold").Value;
	//Logmessage("Coll: " + oColl(0).Index);
	var oObj = oSubColl.Parent3DObject;
	var oGeom = oObj.ActivePrimitive.Geometry; 
	var attr = oGeom.GetICEAttributeFromName("PolygonArea");
	var vbaSquares = new VBArray( attr.DataArray ).toArray();

	var sqMin = vbaSquares[oColl(0).Index] - oTresh;
	var sqMax = vbaSquares[oColl(0).Index] + oTresh;
	for(var i=0; i < vbaSquares.length; i++)
	{
		if(sqMin < vbaSquares[i] && vbaSquares[i] < sqMax)
		{
			Selection.Add(oGeom.Polygons(i));
		}
	}	
}