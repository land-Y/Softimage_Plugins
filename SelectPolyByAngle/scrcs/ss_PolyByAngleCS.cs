// ss_PolyByAngleCS
// Initial code generated by Softimage SDK Wizard
// Executed Wed Dec 31 23:02:11 UTC+0300 2014 by sshadows
// 
// Tip: You need to compile the generated code before you can load the plug-in.
// After you compile the plug-in, you can load it by clicking Update All in the Plugin Manager.

using System;
using System.Collections.Generic;
using Softimage.XSIOM; // Softimage object model
using Softimage.XSIMath;
using Softimage.XSIUtil;

public class Base
{
    CXSIApplicationClass m_xsi;
    CXSIFactoryClass m_fact;
    CXSIUtilsClass m_utils;
    CXSIMathClass m_math;

    protected Base()
    {
        m_xsi = new CXSIApplicationClass();
        m_fact = new CXSIFactoryClass();
        m_utils = new CXSIUtilsClass();
        m_math = new CXSIMathClass();

    }
    protected bool Log(String str)
    {
        m_xsi.LogMessage(str, siSeverity.siVerbose);
        return true;
    }

    protected bool Info(String str)
    {
        m_xsi.LogMessage(str, siSeverity.siInfo);
        return true;
    }

    protected bool Error(String str)
    {
        m_xsi.LogMessage(str, siSeverity.siError);
        return true;
    }

    protected XSIApplication GetXSI()
    {
        return m_xsi;
    }

    protected XSIFactory GetFactory()
    {
        return m_fact;
    }

    protected XSIUtils GetUtils()
    {
        return m_utils;
    }

    protected CXSIMathClass GetMath()
    {
        return m_math;
    }
}


public class XSIPlugin : Base
{
    public bool Load(PluginRegistrar in_reg)
    {
        in_reg.Author = "Svyatoslav Shumikhin";
        in_reg.Name = "ss_PolyByAngleCS";
        in_reg.Major = 1;
        in_reg.Minor = 0;

        //RegistrationInsertionPoint - do not remove this line
        in_reg.RegisterFilter("ss_PolyByAngleCS", siFilterType.siFilterSubComponentPolygon);

        return true;
    }

    public bool Unload(PluginRegistrar in_reg)
    {
        String strPluginName = null;
        strPluginName = in_reg.Name;
        Log(strPluginName + " has been unloaded.");
        return true;
    }
}

public class ss_PolyByAngleCS : Base
{
    private List<int> newSelectedPolys = new List<int>();

    public bool Match(Context in_context)
    {
        //Log("Match!");
        SIObject in_object = (SIObject)in_context.GetAttribute("Input");

        if (!IsAPolygonSubComponent(in_object)) return false;

        return true;
    }

    public bool Subset(Context in_context)
    {
        //Log("Subset!");

        XSICollection coll = (XSICollection)GetFactory().CreateObject("XSI.Collection");
        XSICollection in_objects = (XSICollection)in_context.GetAttribute("Input");

        Array inspectobjArgs = Array.CreateInstance(typeof(Object), 5);
        inspectobjArgs.SetValue(GetPolyByAngleProp(), 0);

        GetXSI().ExecuteCommand("InspectObj", inspectobjArgs);

        CustomProperty oDial = (CustomProperty)GetXSI().ActiveSceneRoot.Properties["SelectByAngle"];
        double inputAngle = (double)(Math.PI / 180) * ((float)oDial.Parameters["Angle"].get_Value(0));

        //from each selected object get polys by angle
        foreach (CollectionItem obj in in_objects)
        {
            SubComponent subc = obj.SubComponent;
            //get selected polygons
            PolygonFaceCollection curSelectedPolygons = (PolygonFaceCollection)subc.ComponentCollection;
            List<int> allSelectedPolygons = new List<int>();
            foreach (PolygonFace poly in curSelectedPolygons)
            {
                allSelectedPolygons.Add(poly.Index);
            }

            Geometry oGeom = subc.Parent3DObject.ActivePrimitive.GetGeometry(0, siConstructionMode.siConstructionModeModeling);
            FacetCollection facetCollection = oGeom.Facets;
            Array normalArray = (Array)facetCollection.NormalArray;

            newSelectedPolys.Clear();
            newSelectedPolys.AddRange(allSelectedPolygons);
            newSelectedPolys.AddRange(SelectPolys(inputAngle, facetCollection, allSelectedPolygons, allSelectedPolygons, normalArray));

            Array newPolysArray = Array.CreateInstance(typeof(Object), newSelectedPolys.Count);
            for (int i = 0; i < newSelectedPolys.Count; i++)
            {
                newPolysArray.SetValue(newSelectedPolys[i], i);
            }

            subc.ElementArray = newPolysArray;
            coll.Add(subc);
        }

        // returns the filter objects 
        in_context.SetAttribute("Output", coll);

        return coll.Count > 0;
    }

    private List<int> SelectPolys(double inputAngle, FacetCollection facetCollection, List<int> allSelectedPolygons, List<int> neighSelectedPolygons, Array normalArray)
    {
        List<int> tempArray = new List<int>();

        //for each selected polys get neighbor polygons
        for (int i = 0; i < neighSelectedPolygons.Count; i++)
        {

            PolygonFace pFace = (PolygonFace)facetCollection[neighSelectedPolygons[i]];
            PolygonFaceCollection neighborPolys = (PolygonFaceCollection)pFace.NeighborPolygons();
            if (neighborPolys.Count == 0) continue;

            SIVector3 firstNormal, secondNormal;

            firstNormal = GetMath().CreateVector3((double)normalArray.GetValue(0, pFace.Index),
                                                (double)normalArray.GetValue(1, pFace.Index),
                                                (double)normalArray.GetValue(2, pFace.Index));
            
            foreach (PolygonFace neiPoly in neighborPolys)
            {
                if (allSelectedPolygons.Contains(neiPoly.Index)) continue;

                secondNormal = GetMath().CreateVector3((double)normalArray.GetValue(0, neiPoly.Index),
                                                            (double)normalArray.GetValue(1, neiPoly.Index),
                                                            (double)normalArray.GetValue(2, neiPoly.Index));

                double angle = Math.Abs(firstNormal.Angle(secondNormal));
                if (angle < inputAngle)
                {
                    if (!tempArray.Contains(neiPoly.Index)) tempArray.Add(neiPoly.Index);
                }
            }
        }

        if (tempArray.Count > 0)
        {
            allSelectedPolygons.AddRange(tempArray);
            tempArray.AddRange(SelectPolys(inputAngle, facetCollection, allSelectedPolygons, tempArray, normalArray));
        }

        return tempArray;
    }


    private bool IsAPolygonSubComponent(SIObject in_obj)
    {
        if (in_obj.IsClassOf(siClassID.siSubComponentID) && in_obj.Type == "polySubComponent")
        {
            return true;
        }

        return false;
    }

    private Property GetPolyByAngleProp()
    {
        CustomProperty oProp = null;
        try
        {
            Model oRoot = GetXSI().ActiveSceneRoot;
            oProp = (CustomProperty)oRoot.Properties["SelectByAngle"];

            if (oProp == null)
            {
                oProp = (CustomProperty)oRoot.AddProperty("Custom_parameter_list", false, "SelectByAngle");
                oProp.AddParameter2("Angle", siVariantType.siFloat, 30, 0, 180, 0, 180,
                                            siParamClassification.siClassifUnknown,
                                            (int)siCapabilities.siPersistable,
                                            null, null, null);
            }
        }
        catch (Exception e)
        {
            Error(e.ToString());
        }
        return oProp;
    }
}